// Description: Define the structure of the block and block header.
package structs

import (
	"BlockChainSimulator/utils"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"time"
)

type BlockHeader struct {
	// <--global-->
	PrevBlockHash []byte
	Height        int64
	Nonce         int64
	TimeStamp     time.Time
	TxRoot        []byte // the Merkle tree root of all transactions in the block
	Miner         int    // the NodeId of the miner, usually 0

	// <--used in Account or Contract-->
	StateRoot []byte // the state of the account or contract

	// <--not in use-->
	// MinerAddress string
	// Index        int64
}

func (bh *BlockHeader) Hash() []byte {
	hash := sha256.Sum256(utils.Encode(bh))
	return hash[:]
}

type Block struct {
	Header       *BlockHeader
	Transactions []Transaction
	Hash         []byte
}

// create a new block, the header is generated by the blockchain.go
func NewBlock(header *BlockHeader, txs []Transaction) *Block {
	return &Block{
		Header:       header,
		Transactions: txs,
		Hash:         header.Hash(),
	}
}

func (bh *BlockHeader) String() string {
	return fmt.Sprintf("[PrevBlockHash: %s\n\tNonce: %d\n\tTimeStamp: %s\n\tTxRoot: %s\n\tStateRoot: %s]", hex.EncodeToString(bh.PrevBlockHash), bh.Nonce, bh.TimeStamp, hex.EncodeToString(bh.TxRoot), hex.EncodeToString(bh.StateRoot))
}

func (b *Block) String() string {
	str := fmt.Sprintf("Block Hash: %s\n", hex.EncodeToString(b.Hash))
	str += fmt.Sprintf("Header: %s\n", b.Header)
	str += "Transactions:\n"
	for _, tx := range b.Transactions {
		str += fmt.Sprintf("\t%v\n", tx)
	}
	return str
}
